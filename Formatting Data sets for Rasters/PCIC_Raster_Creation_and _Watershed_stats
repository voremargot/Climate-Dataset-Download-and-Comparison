{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<h2><center>PCIC Watershed statistics </h2></center>\n",
    "This script turns PCIC datasets into rasters to use for analysis. This script has an example of making the dataset smaller prior to creating rasters for faster processing"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "User defined function to create rasters (function also found in myfunctions.py file)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "def CreateRaster(lon_array,lat_array,data_array,res_lat,res_long,save_directory):\n",
    "    from osgeo import gdal\n",
    "    from osgeo import gdal_array\n",
    "    from osgeo import osr,ogr\n",
    "\n",
    "    xmin,ymin,xmax,ymax = [lon_array.min(),lat_array.min(),lon_array.max(),lat_array.max()]\n",
    "    nrows,ncols = np.shape(data_array)\n",
    "    geotransform=(xmin-res_long,res_long,0,ymin-res_lat,0, res_lat)  \n",
    "\n",
    "    output_raster = gdal.GetDriverByName('GTiff').Create(save_directory,ncols, nrows, 1 ,gdal.GDT_Float32)  # Open the file\n",
    "\n",
    "    output_raster.SetGeoTransform(geotransform)  # Specify its coordinates\n",
    "    srs = osr.SpatialReference()                 # Establish its coordinate encoding\n",
    "    srs.ImportFromEPSG(3005)                     # This one specifies WGS84 lat long.\n",
    "                                                 # Anyone know how to specify the \n",
    "                                                 # IAU2000:49900 Mars encoding?\n",
    "    output_raster.SetProjection( srs.ExportToWkt() )   # Exports the coordinate system                                                # to the file\n",
    "    output_raster.GetRasterBand(1).WriteArray(data_array)   # Writes my array to the raster\n",
    "    output_raster.FlushCache()\n",
    "\n",
    "    return"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "from netCDF4 import Dataset,num2date\n",
    "from datetime import date,datetime\n",
    "import matplotlib.pyplot as plt\n",
    "import numpy as np\n",
    "from osgeo import gdal,osr\n",
    "\n",
    "import rasterio\n",
    "from rasterio.warp import calculate_default_transform, reproject, Resampling\n",
    "from rasterio.plot import show\n",
    "import rasterio.mask\n",
    "\n",
    "import fiona\n",
    "import pandas as pd\n",
    "\n",
    "from sklearn import linear_model"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<h3> Defining datetime of dataset"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [],
   "source": [
    "Dir='C:/Users/vore/Desktop/HydroMet_Project/Data/PCIC/Temp_Max_monthly.nc'"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [],
   "source": [
    "nc_file=Dataset(Dir) # PCIC Data File\n",
    "\n",
    "#---------------------------------Defining Time------------------------------------------------------------------------\n",
    "t_units=nc_file.variables['time'].units   # Units of time\n",
    "t_cal=nc_file.variables['time'].calendar  # Calendar Units of time\n",
    "\n",
    "t_datetime=[]\n",
    "for x in np.arange(0,len(nc_file.variables['time'])):\n",
    "    t=(float(np.ma.getdata(nc_file.variables['time'][x]))) \n",
    "    t_datetime.append(num2date(t,units=t_units,calendar=t_cal)) #change to datetime format\n",
    "\n",
    "#save time and month in array format\n",
    "t_month=[];t_year=[]\n",
    "for x in np.arange(0,len(t_datetime)):\n",
    "    t_month.append(t_datetime[x].month)\n",
    "    t_year.append(t_datetime[x].year)\n",
    "t=np.array([t_year,t_month]) \n",
    "\n",
    "#---------------------------------------Defining Location------------------------------------------\n",
    "# Defining Latitude\n",
    "lat=[]\n",
    "for x in np.arange(0,len(nc_file.variables['lat'])):\n",
    "    lat.append(nc_file.variables['lat'][x])\n",
    "\n",
    "#Defining Longitude\n",
    "long=[]\n",
    "for x in np.arange(0,len(nc_file.variables['lon'])):\n",
    "    long.append(nc_file.variables['lon'][x])\n",
    "    \n",
    "lat=np.array(lat)\n",
    "long=np.array(long)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<h3> Extract Data from .nc file </h3>\n",
    "This code is written to find the monthly sums of precipitation for each grid cell. By changing the variable and np.sum function, any descriptive statistic can be found for a variable of choice on a grid-cell scale."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Initate Dataframe\n",
    "var_Month=pd.DataFrame({'Year':[],'Month':[],'TMin':[]})\n",
    "\n",
    "\n",
    "for YEAR in np.arange(min(t_year),max(t_year)+1):\n",
    "    \n",
    "    #define the indices that correspond to the respected year\n",
    "    index_year=np.where(t[0]==YEAR)[0]\n",
    "    \n",
    "    for month in np.arange(1,13,1):\n",
    "        #extract var for a given year\n",
    "        var_YEAR=nc_file.variables['tasmax'][min(index_year):max(index_year)+1,:,:]\n",
    "        #indicies for a given month\n",
    "        index_month=np.where(t[1][min(index_year):max(index_year+1)]==month)[0]\n",
    "        \n",
    "        #extract var values for a given month\n",
    "        var_MONTH=var_YEAR[min(index_month):max(index_month)+1]\n",
    "        var_MONTH=np.array(var_MONTH)\n",
    "        \n",
    "        #replace no data with nan values\n",
    "        var_MONTH[var_MONTH<-1e+38]=np.nan\n",
    "        \n",
    "        #get average minimum temperature for each month\n",
    "        p=np.average(np.array(var_MONTH),axis=0)  \n",
    "        \n",
    "        #save monthly var totals in a dataframe\n",
    "        var_Month=var_Month.append({'Year':YEAR,'Month':month,'TMin':p},ignore_index=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Year</th>\n",
       "      <th>Month</th>\n",
       "      <th>TMin</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>1945.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>[[-4.969068, -4.8021865, -5.0698557, -5.163528...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>1945.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>[[-5.058704, -4.3978877, -4.0144286, -4.371202...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>1945.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>[[-3.8166301, -2.4483054, -1.4927164, -2.43399...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>1945.0</td>\n",
       "      <td>4.0</td>\n",
       "      <td>[[-0.6795798, 0.66068894, 1.4578907, 0.6261433...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>1945.0</td>\n",
       "      <td>5.0</td>\n",
       "      <td>[[9.9739, 11.330113, 12.138265, 11.304742, 9.1...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>811</td>\n",
       "      <td>2012.0</td>\n",
       "      <td>8.0</td>\n",
       "      <td>[[12.465051, 13.805534, 14.639952, 13.7535095,...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>812</td>\n",
       "      <td>2012.0</td>\n",
       "      <td>9.0</td>\n",
       "      <td>[[8.105134, 9.393467, 10.159194, 9.356017, 7.5...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>813</td>\n",
       "      <td>2012.0</td>\n",
       "      <td>10.0</td>\n",
       "      <td>[[-1.3066093, -0.47456944, 0.07345372, -0.6078...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>814</td>\n",
       "      <td>2012.0</td>\n",
       "      <td>11.0</td>\n",
       "      <td>[[-8.0034075, -7.315228, -6.6278577, -6.867701...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>815</td>\n",
       "      <td>2012.0</td>\n",
       "      <td>12.0</td>\n",
       "      <td>[[-9.004338, -8.438377, -8.2142105, -7.9911194...</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>816 rows Ã— 3 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "       Year  Month                                               TMin\n",
       "0    1945.0    1.0  [[-4.969068, -4.8021865, -5.0698557, -5.163528...\n",
       "1    1945.0    2.0  [[-5.058704, -4.3978877, -4.0144286, -4.371202...\n",
       "2    1945.0    3.0  [[-3.8166301, -2.4483054, -1.4927164, -2.43399...\n",
       "3    1945.0    4.0  [[-0.6795798, 0.66068894, 1.4578907, 0.6261433...\n",
       "4    1945.0    5.0  [[9.9739, 11.330113, 12.138265, 11.304742, 9.1...\n",
       "..      ...    ...                                                ...\n",
       "811  2012.0    8.0  [[12.465051, 13.805534, 14.639952, 13.7535095,...\n",
       "812  2012.0    9.0  [[8.105134, 9.393467, 10.159194, 9.356017, 7.5...\n",
       "813  2012.0   10.0  [[-1.3066093, -0.47456944, 0.07345372, -0.6078...\n",
       "814  2012.0   11.0  [[-8.0034075, -7.315228, -6.6278577, -6.867701...\n",
       "815  2012.0   12.0  [[-9.004338, -8.438377, -8.2142105, -7.9911194...\n",
       "\n",
       "[816 rows x 3 columns]"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "var_Month"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<h3> Cut data down to smaller extent </h3>\n",
    "For faster processing I cut the Rasters down to a smaller extent (for my work this is watershed sized) before covert them into rasters. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [],
   "source": [
    "# An array of the 6 watersheds I am working with \n",
    "WS_array=['Spius','Chilko','Chilcotin','Nation','Osilinka','Mesilinka']\n",
    "\n",
    "# Lat and Long coordinates of each of the watersheds extents in format of [min, max]\n",
    "Osilinka_WS_lat=[55.7,56.8];Osilinka_WS_long=[-126.3,-124.3]\n",
    "Mesilinka_WS_lat=[55.7,56.8];Mesilinka_WS_long=[-127.2,-123.5]\n",
    "Nation_WS_lat=[54.8,55.8];Nation_WS_long=[-126,-123.1]\n",
    "Chilko_WS_lat=[50.6,53];Chilko_WS_long=[-125.1,-122.3]\n",
    "Chilcotin_WS_lat=[50.6,53];Chilcotin_WS_long=[-125.1,-122.3]\n",
    "Spius_WS_lat=[49.5,50.4];Spius_WS_long=[-121.4,-120.7,]\n",
    "\n",
    "#complile extent data into dataframe\n",
    "WS_extent=pd.DataFrame({'Watershed':WS_array,'Latitude':[Spius_WS_lat,Chilko_WS_lat,Chilcotin_WS_lat,Nation_WS_lat,\n",
    "                            Osilinka_WS_lat,Mesilinka_WS_lat],'Longitude':[Spius_WS_long,Chilko_WS_long,Chilcotin_WS_long,\n",
    "                            Nation_WS_long,Osilinka_WS_long,Mesilinka_WS_long]})\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "For each watershed, year, and month, this code creates a raster, mask the raster to the watershed extent, find the average minimum temperature of the watershed for the given month, then deletes the raster. This is best used to extract watershed statistics. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Watersheds to make rasters of\n",
    "WS_array=['Spius','Chilko','Chilcotin','Nation','Osilinka','Mesilinka']\n",
    "\n",
    "#where to save raster\n",
    "Save_file='C:/Users/vore/Desktop/HydroMet_Project/Data/PCIC/Working_Rasters/T_working_New.tif'\n",
    "\n",
    "P_totals=pd.DataFrame({'WS':[],'Year':[],'Month':[],'TempMin':[]})\n",
    "\n",
    "for WS in WS_array: \n",
    "    for year in np.arange(1979,2012):\n",
    "        for month in np.arange(1,13,1):\n",
    "            \n",
    "            #definethe smaller extent to make a raster of\n",
    "            Extent_w=WS_extent[WS_extent.Watershed==WS]\n",
    "\n",
    "            #extract indicies that meet the extent requirements of lat and long\n",
    "            lat_idx=np.where((lat<np.array(Extent_w.Latitude)[0][1]) & (lat >np.array(Extent_w.Latitude)[0][0]))[0]\n",
    "            long_idx=np.where((long <np.array(Extent_w.Longitude)[0][1]) & (long > np.array(Extent_w.Longitude)[0][0]))[0]\n",
    "\n",
    "            #extract the minimum temperature array for the given month/year\n",
    "            E_working= var_Month[(var_Month.Year==year)&(var_Month.Month==month)].TMin\n",
    "            idx=E_working.index[0]\n",
    "            E_working=E_working[idx]\n",
    "\n",
    "            #create array of TMin, lat, and long (within smaller extent) that will be used to create the raster\n",
    "            Z=[];W=[]\n",
    "            for i in lat_idx:\n",
    "                for j in long_idx:\n",
    "                    Z.append([E_working[i,j],lat[i], long[j]])\n",
    "            \n",
    "            #re-organizing datasets for Create Raster function\n",
    "            Z=np.array(Z)\n",
    "            res_lat= np.unique(Z[:,1])[1]-np.unique(Z[:,1])[0]\n",
    "            res_long=np.unique(Z[:,2])[1]-np.unique(Z[:,2])[0]\n",
    "            var_array=np.reshape(Z[:,0],(-1,len(np.unique(Z[:,2]))))\n",
    "            lat_array=np.reshape(Z [:,1], (-1,len(np.unique(Z[:,2]))))\n",
    "            lon_array=np.reshape(Z [:,2],(-1,len(np.unique(Z[:,2]))))\n",
    "\n",
    "            CreateRaster(lon_array,lat_array,var_array,res_lat,res_long,Save_file)\n",
    "        \n",
    "            #Open the watershed shapefile to mask the raster to\n",
    "            shapefile= fiona.open(\"C:/Users/vore/Desktop/HydroMet_Project/GIS_maps/Shapefiles_WaterFeatures/Individual_ws/%s/%s_WS.shp\"%(WS,WS), \"r\") \n",
    "            features=[]\n",
    "            for feature in shapefile:\n",
    "                features.append(feature[\"geometry\"])\n",
    "\n",
    "            #Mask raster to watershed extent\n",
    "            with rasterio.open(Save_file) as src:\n",
    "                out_image, out_transform = rasterio.mask.mask(src, features,crop=True)\n",
    "                out_meta = src.meta.copy()\n",
    "                #show(out_image)\n",
    "                out_image=np.concatenate(out_image[0])\n",
    "            \n",
    "            #\n",
    "            idx_null=np.where(out_image==0)\n",
    "            for x in idx_null:\n",
    "                out_image[x]=np.nan\n",
    "\n",
    "            #Average the minimum temperature values in the watershed \n",
    "            Sum_M=np.nanmean(out_image) ## Change this to any watershed statistic desired\n",
    "\n",
    "            #Erase the Raster that was created (to save space)\n",
    "            gdal.GetDriverByName('GTiff').Delete(Save_file)\n",
    "\n",
    "            #Append watershed statistic to dataframe\n",
    "            P_totals= P_totals.append({'WS':WS,'Year':year,'Month':month,'TempMin':Sum_M},ignore_index=True)\n",
    "\n",
    "#export dataframe to excel\n",
    "# with pd.ExcelWriter('C:/Users/vore/Desktop/HydroMet_Project/Sharable_Data/PCIC/TMax_PCIC_ALL.xlsx') as writer:  \n",
    "#     P_totals.to_excel(writer, sheet_name=WS)\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>WS</th>\n",
       "      <th>Year</th>\n",
       "      <th>Month</th>\n",
       "      <th>TempMin</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>Spius</td>\n",
       "      <td>1979.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>-8.825379</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>Spius</td>\n",
       "      <td>1979.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>-1.685325</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>Spius</td>\n",
       "      <td>1979.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>5.570432</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>Spius</td>\n",
       "      <td>1979.0</td>\n",
       "      <td>4.0</td>\n",
       "      <td>8.740647</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>Spius</td>\n",
       "      <td>1979.0</td>\n",
       "      <td>5.0</td>\n",
       "      <td>12.834581</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2371</td>\n",
       "      <td>Mesilinka</td>\n",
       "      <td>2011.0</td>\n",
       "      <td>8.0</td>\n",
       "      <td>14.227114</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2372</td>\n",
       "      <td>Mesilinka</td>\n",
       "      <td>2011.0</td>\n",
       "      <td>9.0</td>\n",
       "      <td>11.262010</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2373</td>\n",
       "      <td>Mesilinka</td>\n",
       "      <td>2011.0</td>\n",
       "      <td>10.0</td>\n",
       "      <td>4.206355</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2374</td>\n",
       "      <td>Mesilinka</td>\n",
       "      <td>2011.0</td>\n",
       "      <td>11.0</td>\n",
       "      <td>-4.306751</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2375</td>\n",
       "      <td>Mesilinka</td>\n",
       "      <td>2011.0</td>\n",
       "      <td>12.0</td>\n",
       "      <td>-2.503060</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>2376 rows Ã— 4 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "             WS    Year  Month    TempMin\n",
       "0         Spius  1979.0    1.0  -8.825379\n",
       "1         Spius  1979.0    2.0  -1.685325\n",
       "2         Spius  1979.0    3.0   5.570432\n",
       "3         Spius  1979.0    4.0   8.740647\n",
       "4         Spius  1979.0    5.0  12.834581\n",
       "...         ...     ...    ...        ...\n",
       "2371  Mesilinka  2011.0    8.0  14.227114\n",
       "2372  Mesilinka  2011.0    9.0  11.262010\n",
       "2373  Mesilinka  2011.0   10.0   4.206355\n",
       "2374  Mesilinka  2011.0   11.0  -4.306751\n",
       "2375  Mesilinka  2011.0   12.0  -2.503060\n",
       "\n",
       "[2376 rows x 4 columns]"
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "P_totals"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
